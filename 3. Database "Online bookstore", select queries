#Display all orders of Pavel Baranov (order id, what books, at what price and in what quantity he ordered) sorted by order number and book titles.

SELECT buy_book.buy_id, book.title, book.price, buy_book.amount
FROM 
    client 
    INNER JOIN buy ON client.client_id = buy.client_id
    INNER JOIN buy_book ON buy_book.buy_id = buy.buy_id
    INNER JOIN book ON buy_book.book_id=book.book_id
WHERE name_client ='Баранов Павел'
ORDER BY 1, 2;                    

#Calculate how many times each book was ordered, display its author for the book (you need to calculate how many orders each book appears in). Print the last name and initials of the author, 
the title of the book, name the last column Quantity. The result is sorted first by the names of the authors, and then by the titles of the books.

SELECT author.name_author, book.title, COUNT(buy_book.book_id) AS Количество
FROM author
    LEFT JOIN book ON author.author_id = book.author_id 
    LEFT JOIN buy_book ON buy_book.book_id = book.book_id
GROUP BY book.title, author.name_author
HAVING title IS NOT NULL
ORDER BY 1, 2

#Display the cities where customers who placed orders in the online store live. Specify the number of orders to each city, 
name this column Quantity. Display information in descending order by the number of orders, and then in alphabetical order by city name.

SELECT city.name_city, COUNT(client.city_id) AS Количество
FROM city
    INNER JOIN client ON client.city_id = city.city_id 
    INNER JOIN buy ON buy.client_id = client.client_id
GROUP BY city.name_city
ORDER BY 2 DESC, 1;



#Display the numbers of all paid orders and the dates when they were paid.

SELECT buy_step.buy_id, date_step_end
FROM step
    INNER JOIN buy_step ON step.step_id = buy_step.step_id 
WHERE date_step_end IS NOT NULL AND name_step = 'Оплата';


#Display information about each order: its number, who formed it (user's last name) and its cost (the sum of the products of 
the number of ordered books and their prices), sorted by order number. The last column is called Cost.

SELECT buy.buy_id, client.name_client, SUM(book.price * buy_book.amount) AS Стоимость
FROM client
    INNER JOIN buy ON buy.client_id = client.client_id
    INNER JOIN buy_book ON buy.buy_id = buy_book.buy_id
    INNER JOIN book ON book.book_id = buy_book.book_id
GROUP BY buy.buy_id
ORDER BY 1;

#Display the order numbers (buy_id) and the names of the stages they are currently at. 
If the order has been delivered, do not display information about it. Sort the information in ascending order by buy_id.

SELECT buy_step.buy_id, step.name_step
FROM step
    INNER JOIN buy_step ON step.step_id = buy_step.step_id 
WHERE date_step_end IS NULL AND date_step_beg IS NOT NULL;

#In the city table for each city, the number of days for which the order can be delivered to this city is indicated (only the "Transportation" stage is considered). 
For those orders that have passed the stage of transportation, display the number of days for which the order is actually delivered to the city. 
And also, if the order is delivered late, specify the number of days of delay, otherwise, 
output 0. Include the order number (buy_id) as well as the calculated columns Number_days and Lateness in the result. Display information sorted by order number.


SELECT buy.buy_id, 
  DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) AS Количество_дней, 
  IF(city.days_delivery < DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg), 
  DATEDIFF(buy_step.date_step_end, buy_step.date_step_beg) - city.days_delivery, 0) AS Опоздание
FROM city
    INNER JOIN client ON city.city_id = client.city_id
    INNER JOIN buy ON buy.client_id = client.client_id
    INNER JOIN buy_step ON buy_step.buy_id = buy.buy_id
    INNER JOIN step ON step.step_id = buy_step.step_id
WHERE step.name_step = 'Транспортировка' AND buy_step.date_step_end IS NOT NULL
ORDER BY 1;

#Select all clients who ordered Dostoevsky's books, display the information sorted alphabetically. In the solution, use the author's last name, not his id.

SELECT DISTINCT client.name_client
FROM client
    INNER JOIN buy ON buy.client_id = client.client_id
    INNER JOIN buy_book ON buy.buy_id = buy_book.buy_id
    INNER JOIN book ON book.book_id = buy_book.book_id
    INNER JOIN author ON author.author_id = book.author_id
WHERE author.name_author="Достоевский Ф.М." 
ORDER BY 1;

#Display the genre (or genres) in which the most copies of books were ordered, indicate this number. Name the last column Quantity.
SELECT genre.name_genre, SUM(buy_book.amount) AS Quantity
FROM genre
    INNER JOIN book ON book.genre_id = genre.genre_id
    INNER JOIN buy_book ON book.book_id = buy_book.book_id
GROUP BY genre.name_genre
HAVING Quantity IN (SELECT MAX(sum_amount)
FROM (SELECT SUM(buy_book.amount) AS sum_amount
    FROM genre
        INNER JOIN book ON book.genre_id = genre.genre_id
        INNER JOIN buy_book ON book.book_id = buy_book.book_id
    GROUP BY genre.name_genre) query_in)

#Compare monthly book sales for the current year and the previous year. 
To do this, display the year, month, amount of revenue sorted first in ascending months, then in ascending years. Column names: Year, Month, Amount.
SELECT YEAR(date_payment) AS Год, MONTHNAME(date_payment) AS Месяц, SUM(price*amount) AS Сумма
FROM 
    buy_archive
WHERE YEAR(date_payment) IS NOT NULL
GROUP BY 1, 2
UNION ALL
SELECT YEAR(date_step_end), MONTHNAME(date_step_end), SUM(book.price*buy_book.amount)
FROM 
    book 
    INNER JOIN buy_book USING(book_id)
    INNER JOIN buy USING(buy_id) 
    INNER JOIN buy_step USING(buy_id)
    INNER JOIN step USING(step_id)                  
WHERE YEAR(date_step_end) IS NOT NULL and name_step = "Оплата"  

GROUP BY 1, 2
ORDER BY 2, 1;

#For each individual book, it is necessary to display information on the number of copies sold and their
cost for 2020 and 2019. Name the calculated columns Quantity and Amount. Sort information in descending order.

SELECT query_in.title, SUM(Количество) AS Количество, SUM(Сумма) AS Сумма
FROM(
    SELECT book.title, SUM(buy_book.amount) AS Количество, SUM(price*buy_book.amount) AS Сумма
    FROM 
        book 
        INNER JOIN buy_book USING(book_id)
        INNER JOIN buy USING(buy_id) 
        INNER JOIN buy_step USING(buy_id)
        INNER JOIN step USING(step_id)                  
    WHERE  date_step_end IS NOT Null and name_step = "Оплата"  
    GROUP BY book.title
    UNION ALL
    SELECT book.title, SUM(buy_archive.amount), SUM(buy_archive.price*buy_archive.amount)
    FROM 
        book 
        INNER JOIN buy_archive USING(book_id)
    WHERE  date_payment IS NOT Null 
    GROUP BY book.title) AS query_in
GROUP BY query_in.title
ORDER BY 3 DESC;

